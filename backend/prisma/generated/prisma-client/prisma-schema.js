module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateProfile {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  userId: User!
  username: String!
  name: String!
  role: String!
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  userId: UserCreateOneWithoutProfileIdInput!
  username: String!
  name: String!
  role: String!
}

input ProfileCreateOneWithoutUserIdInput {
  create: ProfileCreateWithoutUserIdInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserIdInput {
  id: ID
  username: String!
  name: String!
  role: String!
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
}

type ProfilePreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  username: String!
  name: String!
  role: String!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  userId: UserUpdateOneRequiredWithoutProfileIdInput
  username: String
  name: String
  role: String
}

input ProfileUpdateManyMutationInput {
  username: String
  name: String
  role: String
}

input ProfileUpdateOneWithoutUserIdInput {
  create: ProfileCreateWithoutUserIdInput
  update: ProfileUpdateWithoutUserIdDataInput
  upsert: ProfileUpsertWithoutUserIdInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateWithoutUserIdDataInput {
  username: String
  name: String
  role: String
}

input ProfileUpsertWithoutUserIdInput {
  update: ProfileUpdateWithoutUserIdDataInput!
  create: ProfileCreateWithoutUserIdInput!
}

input ProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: UserWhereInput
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  AND: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  id: ID
}

type Project {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  description: String
  imageURL: String
  learning_objectives: String
  subjects: [String!]!
  tags: [String!]!
  grades: [Int!]!
  published: Boolean
  author: User
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreategradesInput {
  set: [Int!]
}

input ProjectCreateInput {
  id: ID
  title: String!
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectCreatesubjectsInput
  tags: ProjectCreatetagsInput
  grades: ProjectCreategradesInput
  published: Boolean
  author: UserCreateOneWithoutProjectsInput
}

input ProjectCreateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreatesubjectsInput {
  set: [String!]
}

input ProjectCreatetagsInput {
  set: [String!]
}

input ProjectCreateWithoutAuthorInput {
  id: ID
  title: String!
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectCreatesubjectsInput
  tags: ProjectCreatetagsInput
  grades: ProjectCreategradesInput
  published: Boolean
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  imageURL_ASC
  imageURL_DESC
  learning_objectives_ASC
  learning_objectives_DESC
  published_ASC
  published_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  description: String
  imageURL: String
  learning_objectives: String
  subjects: [String!]!
  tags: [String!]!
  grades: [Int!]!
  published: Boolean
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  imageURL: String
  imageURL_not: String
  imageURL_in: [String!]
  imageURL_not_in: [String!]
  imageURL_lt: String
  imageURL_lte: String
  imageURL_gt: String
  imageURL_gte: String
  imageURL_contains: String
  imageURL_not_contains: String
  imageURL_starts_with: String
  imageURL_not_starts_with: String
  imageURL_ends_with: String
  imageURL_not_ends_with: String
  learning_objectives: String
  learning_objectives_not: String
  learning_objectives_in: [String!]
  learning_objectives_not_in: [String!]
  learning_objectives_lt: String
  learning_objectives_lte: String
  learning_objectives_gt: String
  learning_objectives_gte: String
  learning_objectives_contains: String
  learning_objectives_not_contains: String
  learning_objectives_starts_with: String
  learning_objectives_not_starts_with: String
  learning_objectives_ends_with: String
  learning_objectives_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdategradesInput {
  set: [Int!]
}

input ProjectUpdateInput {
  title: String
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectUpdatesubjectsInput
  tags: ProjectUpdatetagsInput
  grades: ProjectUpdategradesInput
  published: Boolean
  author: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  title: String
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectUpdatesubjectsInput
  tags: ProjectUpdatetagsInput
  grades: ProjectUpdategradesInput
  published: Boolean
}

input ProjectUpdateManyMutationInput {
  title: String
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectUpdatesubjectsInput
  tags: ProjectUpdatetagsInput
  grades: ProjectUpdategradesInput
  published: Boolean
}

input ProjectUpdateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdatesubjectsInput {
  set: [String!]
}

input ProjectUpdatetagsInput {
  set: [String!]
}

input ProjectUpdateWithoutAuthorDataInput {
  title: String
  description: String
  imageURL: String
  learning_objectives: String
  subjects: ProjectUpdatesubjectsInput
  tags: ProjectUpdatetagsInput
  grades: ProjectUpdategradesInput
  published: Boolean
}

input ProjectUpdateWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAuthorDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAuthorDataInput!
  create: ProjectCreateWithoutAuthorInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  imageURL: String
  imageURL_not: String
  imageURL_in: [String!]
  imageURL_not_in: [String!]
  imageURL_lt: String
  imageURL_lte: String
  imageURL_gt: String
  imageURL_gte: String
  imageURL_contains: String
  imageURL_not_contains: String
  imageURL_starts_with: String
  imageURL_not_starts_with: String
  imageURL_ends_with: String
  imageURL_not_ends_with: String
  learning_objectives: String
  learning_objectives_not: String
  learning_objectives_in: [String!]
  learning_objectives_not_in: [String!]
  learning_objectives_lt: String
  learning_objectives_lte: String
  learning_objectives_gt: String
  learning_objectives_gte: String
  learning_objectives_contains: String
  learning_objectives_not_contains: String
  learning_objectives_starts_with: String
  learning_objectives_not_starts_with: String
  learning_objectives_ends_with: String
  learning_objectives_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  profileId: Profile
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  role: String!
  projects: ProjectCreateManyWithoutAuthorInput
  profileId: ProfileCreateOneWithoutUserIdInput
}

input UserCreateOneWithoutProfileIdInput {
  create: UserCreateWithoutProfileIdInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileIdInput {
  id: ID
  email: String!
  password: String!
  role: String!
  projects: ProjectCreateManyWithoutAuthorInput
}

input UserCreateWithoutProjectsInput {
  id: ID
  email: String!
  password: String!
  role: String!
  profileId: ProfileCreateOneWithoutUserIdInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  role: String
  projects: ProjectUpdateManyWithoutAuthorInput
  profileId: ProfileUpdateOneWithoutUserIdInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  role: String
}

input UserUpdateOneRequiredWithoutProfileIdInput {
  create: UserCreateWithoutProfileIdInput
  update: UserUpdateWithoutProfileIdDataInput
  upsert: UserUpsertWithoutProfileIdInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProfileIdDataInput {
  email: String
  password: String
  role: String
  projects: ProjectUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProjectsDataInput {
  email: String
  password: String
  role: String
  profileId: ProfileUpdateOneWithoutUserIdInput
}

input UserUpsertWithoutProfileIdInput {
  update: UserUpdateWithoutProfileIdDataInput!
  create: UserCreateWithoutProfileIdInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  projects_some: ProjectWhereInput
  profileId: ProfileWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    